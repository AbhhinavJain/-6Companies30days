Q - https://leetcode.com/problems/maximum-length-of-repeated-subarray/description/

class Solution {
public:
    int solve(vector<int>&nums1,vector<int>&nums2,int i,int j,vector<vector<int>>&dp){
        if(i>=nums1.size() || j>=nums2.size())return 0;
        if(dp[i][j]!=-1)return dp[i][j];
        int ans = 0;
        if(nums1[i]==nums2[j]){
            ans = 1 + solve(nums1,nums2,i+1,j+1,dp);
        }
        else{
            return dp[i][j] = ans;
        }
        return dp[i][j] = ans;
    }
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        vector<vector<int>> dp(nums1.size()+1,vector<int>(nums2.size()+1,-1));
        int ans = 0;
        for(int i=0;i<nums1.size();++i){
            for(int j=0;j<nums2.size();++j){
                if(nums1[i]==nums2[j])
                ans = max(ans,solve(nums1,nums2,i,j,dp));
            }
        }
        return ans;
    }
};
Q - https://leetcode.com/problems/swim-in-rising-water/description/

class Solution {
public:
    int dfs(vector<vector<int>>&g,int i,int j,vector<vector<vector<int>>>&dp,vector<vector<int>>&vis,int time){
        if(dp[i][j][time]!=-1)return dp[i][j][time];
        if(i+1==g.size() && j+1==g.size())return g[i][j];
        if(vis[i][j])return INT_MIN;
        vis[i][j] = 1;
        int t1 = INT_MAX,t2,t3,t4;
        t2 = t1;t3 = t2;t4 = t1;
        if(i+1<g.size() && !vis[i+1][j])
            t1 = max(g[i+1][j],dfs(g,i+1,j,dp,vis,max(time,g[i][j])));
        if(i-1>=0 && !vis[i-1][j])
            t2 = max(g[i-1][j],dfs(g,i-1,j,dp,vis,max(time,g[i][j])));
        if(j+1<g.size() && !vis[i][j+1])
            t3 = max(g[i][j+1],dfs(g,i,j+1,dp,vis,max(time,g[i][j])));
        if(j-1>=0 && !vis[i][j-1])
            t4 = max(g[i][j-1],dfs(g,i,j-1,dp,vis,max(time,g[i][j])));
        vis[i][j] = 0;
        return dp[i][j][time] = min(t1,min(t2,min(t3,t4)));
    }
    int swimInWater(vector<vector<int>>& grid) {
        vector<vector<vector<int>>>dp(grid.size()+1,vector<vector<int>>(grid.size()+1,vector<int>(grid.size()*grid.size()+1,-1)));
        vector<vector<int>>vis(grid.size()+1,vector<int>(grid.size()+1,0));
        return max(dfs(grid,0,0,dp,vis,0),grid[0][0]);
    }
};
https://leetcode.com/problems/number-of-ways-to-arrive-at-destination/

class Solution {
public:
    typedef pair<int,int> T;
    int mod = 1e9+7;
    void dijkstra(vector<vector<pair<int,int>>>&g,int s,vector<long long>&dist){
        vector<int>vis(dist.size()+1);
        priority_queue<T,vector<T>,greater<>> pq;
        pq.push({0,s});
        dist[s] = 0;
        while(!pq.empty()){
            auto x = pq.top();
            vis[x.second] = 1;
            pq.pop();
            for(auto it:g[x.second]){
                if(dist[it.first]>it.second+dist[x.second]){
                    dist[it.first] = it.second + dist[x.second];
                }
                if(!vis[it.first]){
                    pq.push({it.second,it.first});
                }
            }
        }
    }
    int dfs(vector<vector<pair<int,int>>>&g,int s,vector<int>&dp,vector<long long>&dist){
        if(s==dist.size()- 1)return 1;
        if(dp[s]!=-1)return dp[s];
        long long ft = dist[s];
        int ans = 0;
        for(auto x:g[s]){
            if(0LL+dist[x.first]+x.second == ft)
                 ans=(0LL+ans+dfs(g,x.first,dp,dist))%mod;
        }
        return dp[s] = ans;
    }
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<vector<pair<int,int>>> g(n);
        for(auto x:roads){
            g[x[0]].push_back({x[1],x[2]});
            g[x[1]].push_back({x[0],x[2]});
        }
        vector<long long> dist(n,1e18);
        dijkstra(g,n-1,dist);
        vector<int> dp(n+1,-1);
        return dfs(g,0,dp,dist);
    }
};